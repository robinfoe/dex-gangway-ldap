#@ load("@ytt:data", "data")
#@ def dex_config():
issuer:  #@ 'http://'+data.values.dex.host+':'+data.values.dex.port
frontend:
  theme: tkg
web:
  http: 0.0.0.0:5556
  tlsCert: /etc/dex/tls/tls.crt
  tlsKey: /etc/dex/tls/tls.key
expiry:
  signingKeys: "10m"
  idTokens: "5m"
logger:
  level: "debug"
  format: "json"
  
staticClients: 
- id: #@ data.values.static.client.id
  redirectURIs:
  - #@ "http://" + data.values.gangway.host + ":" + data.values.gangway.port + "/callback"
  name: #@ data.values.static.client.id
  secret: #@ data.values.static.client.secret

connectors:
- type: mockCallback
  id: mock
  name: Example
- type: ldap
  name: OpenLDAP
  id: ldap
  config:
    host: #@ data.values.ldap.host + ":" + data.values.ldap.port
    #! No TLS for this setup.
    insecureNoSSL: true
    #! This would normally be a read-only user.
    bindDN: cn=admin,dc=example,dc=org
    bindPW: admin
    usernamePrompt: Email Address
    userSearch:
      baseDN: ou=People,dc=example,dc=org
      filter: "(objectClass=person)"
      username: mail
      #! "DN" (case sensitive) is a special attribute name. It indicates that
      #! this value should be taken from the entity's DN not an attribute on
      #! the entity.
      idAttr: DN
      emailAttr: mail
      nameAttr: cn
    groupSearch:
      baseDN: ou=Groups,dc=example,dc=org
      filter: "(objectClass=groupOfNames)"
      userMatchers:
      - userAttr: DN
      #! A user is a member of a group when their DN matches
      #! the value of a "member" attribute on the group entity.
      groupAttr: member
      #! The group name should be the "cn" value.
      nameAttr: cn
oauth2:
  skipApprovalScreen: true
  responseTypes: ["code", "token", "id_token"]
storage:
  type: kubernetes
  config:
    inCluster: true
enablePasswordDB: false
#@ end